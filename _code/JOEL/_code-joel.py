# Generated by Selenium IDE
# permitir mandar por gmail: https://myaccount.google.com/lesssecureapps?pli=1&rapt=AEjHL4M2DM7kvnClCJpPbPMFWq1-wguEnDPfyTr0RAFMnkDnVxitkun-r2GquqVmn5q-NLRtzKW7YYASu4yutswKjOM5Xtwlvw
from IPython.core.display import display, HTML
display(HTML("<style>.container { width:80% !important; }</style>"))
from datetime import date
from parsel import Selector
import pandas as pd
import xlsxwriter
import re
import os
from xlsxwriter.utility import xl_rowcol_to_cell
#import pytest
import numpy as np
import pandas as pd
import time
import json
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from win32com.client import Dispatch #Solo para windows
from selenium.webdriver.support.ui import Select


# Options driver
from selenium.webdriver.chrome.options import Options

# For simulate human behavior.
import time
from time import sleep
import random

# Clear data
import unidecode
# unaccented_string = unidecode.unidecode(accented_string)

# Manipulate Json files
import json

inicio = r"D:\Github\GeoBosques_Scrapping\_code\JOEL"
os.chdir(inicio)

# ABRIR PAGINA DE INTERÉS
options = webdriver.ChromeOptions()
options.add_argument("--start-maximized")
driver = webdriver.Chrome(r"C:\Users\JOEL\AppData\Local\Programs\Python\Python38\Lib\site-packages\selenium\chromedriver.exe", chrome_options=options)
driver.get("http://geobosques.minam.gob.pe/geobosque/view/perdida.php")

######################## OBTNER NOMBRES Y GUARDARLOS  ########################
nombre_single = pd.DataFrame(columns=['dpto', 'prov', 'dist'])
nombre_join  = pd.DataFrame()

# OBTENER NOMRBES
list_dptos = driver.find_element_by_id( 'dr_departamento_chosen')
list_dptos.click()
n_dpto = len(list_dptos.find_elements_by_class_name( "active-result" ))
list_dptos.click()
print(n_dpto)

for dpto_index in range( 1, n_dpto ):
    
    list_dptos = driver.find_element_by_id( 'dr_departamento_chosen')
    list_dptos.click()
    list_dptos.find_elements_by_class_name( "active-result")[ dpto_index ].click()
    name_dpto = list_dptos.find_elements_by_class_name( "active-result")[dpto_index].text
    time.sleep( 2 )

    # Total provinces
    list_prov = driver.find_element_by_id( 'dr_provincia_chosen')
    list_prov.click()
    n_prov = len(list_prov.find_elements_by_class_name( "active-result"))
    list_prov.click()
    print( n_prov )
    
    for prov_index in range( 1, n_prov ):
        
        list_prov = driver.find_element_by_id( 'dr_provincia_chosen')
        list_prov.click()
        list_prov.find_elements_by_class_name( "active-result")[prov_index].click()
        name_prov= list_prov.find_elements_by_class_name( "active-result")[prov_index].text
        time.sleep( 2 )
        
        list_dist = driver.find_element_by_id( 'dr_distrito_chosen')
        list_dist.click()
        n_dist = len(list_dist.find_elements_by_class_name( "active-result"))
        list_dist.click()
        print( n_dist )
        
        for dist_index in range( 1, n_dist ):
            
            list_dist = driver.find_element_by_id( 'dr_distrito_chosen')
            list_dist.click()
            list_dist.find_elements_by_class_name( "active-result")[ dist_index ].click()
            name_dist = list_dist.find_elements_by_class_name( "active-result")[dist_index].text
            time.sleep( 1 )
   
            nombre_single['dpto']=[name_dpto]
            nombre_single['prov']=[name_prov]
            nombre_single['dist']=[name_dist]
            
            nombre_join = pd.concat([nombre_join, nombre_single], axis=0).reset_index(drop=True)

# EXPORTAR NOMBRES
nombre_join.to_excel('dpto_prov_dist.xlsx', index=False)
######################## OBTNER NOMBRES Y GUARDARLOS  ########################

######################## OBTENR NOMBRES ESCRIBIENDO NOMBRES ########################

# CAMBIAR NOMBRES RAROS
nombres = nombre_join.copy()
nombres.at[115, 'dist'] = 'CORONEL CASTA'  #AYACUCHO	PARINACOCHAS CORONEL CASTA�EDA 115
nombres.at[133, 'dist'] = 'HUACA'  # AYACUCHO SUCRE HUACAÑA  133
nombres.at[240, 'dist'] = 'CHANCAYBA'  # CAJAMARCAR SANTA  CRUZ 240
nombres.at[560, 'dist'] = 'BA' # HUANUCO LAURICOCHA BAÑOS 560
nombres.at[857, 'dist'] = 'FERRE' # LAMBAYEQUE FERREÑAFE FERREÑAFE 857
nombres.at[1077, 'dist'] = 'PARI' # PIURA TALARA PARIÑAS 1077

# OBTENER DATOS
tabla_final  = pd.DataFrame()
len(nombre_join)
for i in range(0,len(nombre_join)):
    driver.find_element(By.CSS_SELECTOR, "#dr_departamento_chosen span").click()
    driver.find_element(By.CSS_SELECTOR, "#dr_departamento_chosen .chosen-search-input").click()
    driver.find_element(By.CSS_SELECTOR, "#dr_departamento_chosen .chosen-search-input").send_keys(str(nombres['dpto'][i]))
    driver.find_element(By.CSS_SELECTOR, ".active-result").click()
    time.sleep( 1 )
    driver.find_element(By.CSS_SELECTOR, "#dr_provincia_chosen span").click()
    driver.find_element(By.CSS_SELECTOR, "#dr_provincia_chosen .chosen-search-input").click()
    driver.find_element(By.CSS_SELECTOR, "#dr_provincia_chosen .chosen-search-input").send_keys(str(nombres['prov'][i]))
    driver.find_element(By.CSS_SELECTOR, "#dr_provincia_chosen .active-result").click()
    time.sleep( 1 )
    driver.find_element(By.CSS_SELECTOR, "#dr_distrito_chosen span").click()
    driver.find_element(By.CSS_SELECTOR, "#dr_distrito_chosen .chosen-search-input").click()
    driver.find_element(By.CSS_SELECTOR, "#dr_distrito_chosen .chosen-search-input").send_keys(str(nombres['dist'][i]))
    driver.find_element(By.CSS_SELECTOR, "#dr_distrito_chosen em").click()
    time.sleep( 1 )
    
    print("----------")
    print(str(nombres['dpto'][i])+" "+str(nombres['prov'][i])+" "+str(nombres['dist'][i]))
    print("----------")
            
    tabla_html = driver.find_element_by_id("pannel-perdida-t-ha")
    tabla_intermedia = pd.read_html( tabla_html.get_attribute('outerHTML') )[0]
    tabla_intermedia = tabla_intermedia.assign(dpto=nombres['dpto'][i], prov=nombres['prov'][i], dist = nombres['dist'][i])
    tabla_final = pd.concat([tabla_final, tabla_intermedia], axis=0).reset_index(drop=True)

# EXPORTAR DATOS
tabla_final.to_excel('prueba_borrar.xlsx', index=False)
